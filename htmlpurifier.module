<?php
// $Id$

/**
 * Implementation of hook_help().
 *
 * Used by drupal 4.7
 */
function htmlpurifier_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      $output = t('Filter that removes malicious HTML and ensures standards compliant output.');
      break;
  }
  return $output;
}

/**
 * Implementation of hook_filter().
 */
function htmlpurifier_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('HTML Purifier'));

    case 'no cache':
      // since HTML Purifier implements its own caching layer, having filter
      // cache it again is wasteful. MAYBE make this configurable.
      return TRUE;

    case 'description':
      // TODO: Include description of what tags and properties are active
      return t('Removes malicious HTML code and ensures that the output is standards compliant. Note: For performance reasons, please ensure there are no dynamic filters before this filter.');

    case 'prepare':
      return $text;

    case 'process':
      $cid = md5($text);
      $cache = cache_get($cid, 'cache_htmlpurifier');
      if ($cache) return $cache->data;
      
      $config = _htmlpurifier_get_config($format);
      $purifier = htmlpurifier_create_purifier($config);
      _htmlpurifier_add_filters($format, $purifier);
      $ret = $purifier->purify($text);
      cache_set($cid, 'cache_htmlpurifier', $ret, CACHE_PERMANENT);
      return $ret;

    case 'settings':
      return _htmlpurifier_settings($format);

    default:
      return NULL;
  }
}

function htmlpurifier_create_purifier($config) {
  // Load HTML Purifier library
  $module_path = drupal_get_path('module', 'htmlpurifier');
  require_once "$module_path/library/HTMLPurifier.auto.php";

  // Overload HTML Purifiers default cache handler with our own so that
  // Drupals built-in cache is used
  require_once "$module_path/HTMLPurifier_DefinitionCache_Drupal.php";
  
  // This will complain under E_STRICT with 3.1.0+, but really don't care.
  $factory =& HTMLPurifier_DefinitionCacheFactory::instance();
  if (method_exists($factory, 'register')) {
    $factory->register('Drupal', 'HTMLPurifier_DefinitionCache_Drupal');
  } else {
    // Brittle, used for previous HTML Purifier version compatibility
    $factory->caches['Drupal']['HTML'] = new HTMLPurifier_DefinitionCache_Drupal('HTML');
    $factory->caches['Drupal']['CSS']  = new HTMLPurifier_DefinitionCache_Drupal('CSS');
    $factory->caches['Drupal']['URI']  = new HTMLPurifier_DefinitionCache_Drupal('URI');
  }

  return new HTMLPurifier($config);
}

function _htmlpurifier_settings($format) {
  $form = array();

  $form['htmlpurifier'] = array(
    '#type' => 'fieldset',
    '#title' => t('HTML Purifier'),
    '#collapsible' => TRUE,
  );
  $form['htmlpurifier']["htmlpurifier_enableattrid_$format"] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow the ID attribute in HTML'),
    '#default_value' => variable_get("htmlpurifier_enableattrid_$format", FALSE),
    '#description' => t('If enabled, allows the use of ID attributes in HTML tags. This is disabled by default due to the fact that without proper configuration user input can easily break the validation of a webpage by specifying an ID that is already on the surrounding HTML.'),
  );
  $form['htmlpurifier']["htmlpurifier_preserveyoutube_$format"] = array(
    '#type' => 'checkbox',
    '#title' => t('Preserve embedded YouTube videos'),
    '#default_value' => variable_get("htmlpurifier_preserveyoutube_$format", FALSE),
    '#description' => t('If enabled, allows the use of embedded YouTube videos. See !url for more information.', array('!url' => l('Embedding YouTube Videos', 'http://hp.jpsband.org/live/docs/enduser-youtube.html'))),
  );
  $form['htmlpurifier']["htmlpurifier_help_$format"] = array(
    '#type' => 'checkbox',
    '#title' => t('Display help text'),
    '#default_value' => variable_get("htmlpurifier_help_$format", TRUE),
    '#description' => t('If enabled, a short note will be added to the filter tips explaining that HTML will be transformed to conform with HTML standards. You may want to disable this option when the HTML Purifier is used to check the output of another filter like BBCode.'),
  );

  return $form;
}

function _htmlpurifier_get_config($format) {
  $config = array(
    'Attr.EnableID' => variable_get("htmlpurifier_enableattrid_$format", FALSE),
  );
  return $config;
}

function _htmlpurifier_add_filters($format, &$purifier) {
  if (variable_get("htmlpurifier_preserveyoutube_$format", FALSE) && version_compare($purifier->version, '1.4.1', '>=')) {
    require_once 'HTMLPurifier/Filter/YouTube.php';
    $purifier->addFilter(new HTMLPurifier_Filter_YouTube());
  }
}

/**
 * Implementation of hook_filter_tips().
 */
function htmlpurifier_filter_tips($delta, $format, $long = FALSE) {
  if (variable_get("htmlpurifier_help_$format", TRUE)) {
    return t('HTML tags will be transformed to conform to HTML standards.');
  }
}
